Definite non-tagged non-limited items (integer_lists)
null List:
List (Count =>  0) => ()
Insert_Tail 1 3 5
List (Count =>  3) => 
( 1,
  3,
  5)
Is_Empty (List) => FALSE
Insert_Head 0
List (Count =>  4) => 
( 0,
  1,
  3,
  5)
Delete_Head =  0
List (Count =>  3) => 
( 1,
  3,
  5)
Delete_Tail =  5
List (Count =>  2) => 
( 1,
  3)
Swap
List (Count =>  0) => ()
Other_List (Count =>  2) => 
( 1,
  3)
Copy
List (Count =>  2) => 
( 1,
  3)
Other_List (Count =>  2) => 
( 1,
  3)

Testing basic Iterators operations.
ok, default iterator is Null
ok, None is Null
List (Count =>  3) => 
( 1,
  2,
  3)
ok, First is not Null
First is 1
Next is 2
Last is 3
Next is 2

Testing List modification Iterators operations.
List_1 (Count =>  4) => 
( 1,
  2,
  3,
  4)
Copy_Before, empty to list_1
source (Count =>  0) => ()
dest (Count =>  4) => 
( 1,
  2,
  3,
  4)
Copy_Before, List_1 to empty
Source List_1 (Count =>  4) => 
( 1,
  2,
  3,
  4)
Dest List_2 (Count =>  4) => 
( 1,
  2,
  3,
  4)
Copy_Before, partial List_1 to before tail (list_2)
Source List_1 (Count =>  4) => 
( 1,
  2,
  3,
  4)
Dest List_2 (Count =>  6) => 
( 1,
  2,
  3,
  2,
  3,
  4)
Before between First, Last
Ok, Iterator_Error raised
Source List_1 (Count =>  6) => 
( 1,
  3,
  4,
  2,
  3,
  4)
Dest List_2 (Count =>  6) => 
( 1,
  2,
  3,
  2,
  3,
  4)
First not before Last
Ok, Iterator_Error raised
Source List_1 (Count =>  7) => 
( 1,
  3,
  4,
  1,
  2,
  3,
  4)
Dest List_2 (Count =>  6) => 
( 1,
  2,
  3,
  2,
  3,
  4)
Delete Last (List_1), 4
ok, iterator is done
List_1 (Count =>  6) => 
( 1,
  3,
  4,
  1,
  2,
  3)
Delete First (List_1), 1
ok, iterator did advance
List_1 (Count =>  5) => 
( 3,
  4,
  1,
  2,
  3)
Delete Next (First (List_1)), 4
ok, iterator did advance
List_1 (Count =>  4) => 
( 3,
  1,
  2,
  3)
Delete List_1 all
ok, list is empty
ok, iterator is null
List_1 (Count =>  0) => ()
Delete List_2 with null iterator
Ok, Constraint_Error raised
List_2 (Count =>  6) => 
( 1,
  2,
  3,
  2,
  3,
  4)
Testing Delete (range)
Delete null range from null list
List_1 (Count =>  0) => ()
Delete all using none, none range
List_1 (Count =>  0) => ()
Delete middle
List_1 (Count =>  2) => 
( 1,
  4)
First not before Last
pre-delete (Count =>  4) => 
( 1,
  4,
  5,
  6)
Ok, Iterator_Error raised
post delete (Count =>  3) => 
( 1,
  4,
  5)
Testing Insert_After (iterator, item)
pre-insert (Count =>  4) => 
( 1,
  2,
  3,
  4)
insert_after (none, 5, copies => 0)
 (Count =>  4) => 
( 1,
  2,
  3,
  4)
insert_after (none, 5, copies => 2)
 (Count =>  6) => 
( 1,
  2,
  3,
  4,
  5,
  5)
insert_after (first, 6, copies => 1)
List_1 (Count =>  7) => 
( 1,
  6,
  2,
  3,
  4,
  5,
  5)
Testing Insert_Before (iterator, item)
pre-insert (Count =>  4) => 
( 1,
  2,
  3,
  4)
insert_Before (none, 5, copies => 0)
 (Count =>  4) => 
( 1,
  2,
  3,
  4)
insert_Before (none, 5, copies => 2)
 (Count =>  6) => 
( 5,
  5,
  1,
  2,
  3,
  4)
insert_Before (first, 6, copies => 1)
List_1 (Count =>  7) => 
( 6,
  5,
  5,
  1,
  2,
  3,
  4)
Testing Splice_After
List_1 pre-splice (Count =>  0) => ()
List_2 pre-splice (Count =>  0) => ()
empty source
Dest List_1 (Count =>  0) => ()
source List_2 (Count =>  0) => ()
non-empty source, empty dest
List_2 pre-splice (Count =>  4) => 
( 1,
  2,
  3,
  4)
Dest List_1 (Count =>  4) => 
( 1,
  2,
  3,
  4)
source List_2 (Count =>  0) => ()
partial non-empty source, empty dest
List_2 pre-splice (Count =>  4) => 
( 1,
  2,
  3,
  4)
Dest List_1 (Count =>  2) => 
( 2,
  3)
source List_2 (Count =>  2) => 
( 1,
  4)
partial non-empty source, non-empty dest
List_1 pre-splice (Count =>  2) => 
( 11,
  12)
List_2 pre-splice (Count =>  4) => 
( 1,
  2,
  3,
  4)
Dest List_1 (Count =>  4) => 
( 11,
  12,
  2,
  3)
source List_2 (Count =>  2) => 
( 1,
  4)
after non-tail
List_1 pre-splice (Count =>  2) => 
( 11,
  12)
List_2 pre-splice (Count =>  4) => 
( 1,
  2,
  3,
  4)
Dest List_1 (Count =>  4) => 
( 11,
  2,
  3,
  12)
source List_2 (Count =>  2) => 
( 1,
  4)
after tail
List_1 pre-splice (Count =>  2) => 
( 11,
  12)
List_2 pre-splice (Count =>  4) => 
( 1,
  2,
  3,
  4)
Dest List_1 (Count =>  4) => 
( 11,
  12,
  2,
  3)
source List_2 (Count =>  2) => 
( 1,
  4)
Testing Splice_Before
List_1 pre-splice (Count =>  0) => ()
List_2 pre-splice (Count =>  0) => ()
empty source
Dest List_1 (Count =>  0) => ()
source List_2 (Count =>  0) => ()
non-empty source, empty dest
List_2 pre-splice (Count =>  4) => 
( 1,
  2,
  3,
  4)
Dest List_1 (Count =>  4) => 
( 1,
  2,
  3,
  4)
source List_2 (Count =>  0) => ()
partial non-empty source, empty dest
List_2 pre-splice (Count =>  4) => 
( 1,
  2,
  3,
  4)
Dest List_1 (Count =>  2) => 
( 2,
  3)
source List_2 (Count =>  2) => 
( 1,
  4)
partial non-empty source, non-empty dest
List_1 pre-splice (Count =>  2) => 
( 11,
  12)
List_2 pre-splice (Count =>  4) => 
( 1,
  2,
  3,
  4)
Dest List_1 (Count =>  4) => 
( 2,
  3,
  11,
  12)
source List_2 (Count =>  2) => 
( 1,
  4)
Before non-head
List_1 pre-splice (Count =>  2) => 
( 11,
  12)
List_2 pre-splice (Count =>  4) => 
( 1,
  2,
  3,
  4)
Dest List_1 (Count =>  4) => 
( 11,
  2,
  3,
  12)
source List_2 (Count =>  2) => 
( 1,
  4)
Before Head
List_1 pre-splice (Count =>  2) => 
( 11,
  12)
List_2 pre-splice (Count =>  4) => 
( 1,
  2,
  3,
  4)
Dest List_1 (Count =>  4) => 
( 2,
  3,
  11,
  12)
source List_2 (Count =>  2) => 
( 1,
  4)
Indefinite items (Symbols)
Appending some Symbols
Symbols (Count =>  4) => 
(FLOATING_POINT Significant_Digits => 6,
 FLOATING_POINT Significant_Digits => 5,
 DISCRETE First =>-4 Last => 4,
 DISCRETE First =>-3 Last => 3)
deleting last
Symbols (Count =>  3) => 
(FLOATING_POINT Significant_Digits => 6,
 FLOATING_POINT Significant_Digits => 5,
 DISCRETE First =>-4 Last => 4)
deleting second
Symbols (Count =>  2) => 
(FLOATING_POINT Significant_Digits => 6,
 DISCRETE First =>-4 Last => 4)
Symbols list finalized
Indefinite limited items (puppets)
Appending some puppets
Beanies (Count =>  4) => 
(MUPPET 2 5,
 MUPPET 3 6,
 BEANIE 4,
 BEANIE 6)
deleting last
Beanies (Count =>  3) => 
(MUPPET 2 5,
 MUPPET 3 6,
 BEANIE 4)
deleting second
Beanies (Count =>  2) => 
(MUPPET 2 5,
 BEANIE 4)
Puppets list finalized
