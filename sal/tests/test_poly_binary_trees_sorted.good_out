null tree:
Tree => null
Count  =>  0
Height =>  0
adding 7
Tree => 
  Key => 7; Item => 7
   Left  => null
   Right => null)
Count  =>  1
Height =>  1
adding 2
Tree => 
  Key => 7; Item => 7
   Left  => 
     Key => 2; Item => 2
      Left  => null
      Right => null)
   Right => null)
Count  =>  2
Height =>  2
adding 9
Tree => 
  Key => 7; Item => 7
   Left  => 
     Key => 2; Item => 2
      Left  => null
      Right => null)
   Right => 
     Key => 9; Item => 9
      Left  => null
      Right => null))
Count  =>  3
Height =>  2
adding 4, 5, 6
Tree => 
  Key => 7; Item => 7
   Left  => 
     Key => 2; Item => 2
      Left  => null
      Right => 
        Key => 4; Item => 4
         Left  => null
         Right => 
           Key => 5; Item => 5
            Left  => null
            Right => 
              Key => 6; Item => 6
               Left  => null
               Right => null))))
   Right => 
     Key => 9; Item => 9
      Left  => null
      Right => null))
Count  =>  6
Height =>  5
Adding 1, 3, 8, 8, 8
Initial Tree built
Tree => 
  Key => 7; Item => 7
   Left  => 
     Key => 2; Item => 2
      Left  => 
        Key => 1; Item => 1
         Left  => null
         Right => null)
      Right => 
        Key => 4; Item => 4
         Left  => 
           Key => 3; Item => 3
            Left  => null
            Right => null)
         Right => 
           Key => 5; Item => 5
            Left  => null
            Right => 
              Key => 6; Item => 6
               Left  => null
               Right => null))))
   Right => 
     Key => 9; Item => 9
      Left  => 
        Key => 8; Item => 8
         Left  => null
         Right => 
           Key => 8; Item => 8
            Left  => null
            Right => 
              Key => 8; Item => 8
               Left  => null
               Right => null)))
      Right => null))
Count  =>  11
Height =>  5
Printing nodes in key order
1
2
3
4
5
6
7
8
8
8
9

Iterator finalized
Retrieving 1 => 1
Retrieving 2 => 2
Retrieving 8 => 8

Iterator searching
Searching for all 10's

Values starting with 10

Searching for all 4's
4 
Values starting with 4
4 5 6 7 8 8 8 9 
Searching for all 8's
8 8 8 
Values starting with 8
8 8 8 9 
Iterator finalized
testing Move
Tree to merge into empty tree
Tree => 
  Key => 7 seven; Item => 7 seven
   Left  => 
     Key => 2 two; Item => 2 two
      Left  => 
        Key => 1 one; Item => 1 one
         Left  => null
         Right => null)
      Right => 
        Key => 4 four; Item => 4 four
         Left  => 
           Key => 3 three; Item => 3 three
            Left  => null
            Right => null)
         Right => 
           Key => 5 five; Item => 5 five
            Left  => null
            Right => 
              Key => 6 six; Item => 6 six
               Left  => null
               Right => null))))
   Right => null)
Count  =>  7
Height =>  5
Tree => 
  Key => 7 seven; Item => 7 seven
   Left  => 
     Key => 2 two; Item => 2 two
      Left  => 
        Key => 1 one; Item => 1 one
         Left  => null
         Right => null)
      Right => 
        Key => 4 four; Item => 4 four
         Left  => 
           Key => 3 three; Item => 3 three
            Left  => null
            Right => null)
         Right => 
           Key => 5 five; Item => 5 five
            Left  => null
            Right => 
              Key => 6 six; Item => 6 six
               Left  => null
               Right => null))))
   Right => null)
Count  =>  7
Height =>  5
Original tree (should be empty):
Tree => null
Count  =>  0
Height =>  0
Merging another tree:
Tree => 
  Key => 7; Item => 7
   Left  => 
     Key => 2; Item => 2
      Left  => 
        Key => 1; Item => 1
         Left  => null
         Right => 
           Key => 1 one; Item => 1 one
            Left  => null
            Right => null))
      Right => 
        Key => 4; Item => 4
         Left  => 
           Key => 3; Item => 3
            Left  => 
              Key => 2 two; Item => 2 two
               Left  => null
               Right => null)
            Right => 
              Key => 3 three; Item => 3 three
               Left  => null
               Right => null))
         Right => 
           Key => 5; Item => 5
            Left  => 
              Key => 4 four; Item => 4 four
               Left  => null
               Right => null)
            Right => 
              Key => 6; Item => 6
               Left  => 
                 Key => 5 five; Item => 5 five
                  Left  => null
                  Right => null)
               Right => 
                 Key => 6 six; Item => 6 six
                  Left  => null
                  Right => null)))))
   Right => 
     Key => 9; Item => 9
      Left  => 
        Key => 8; Item => 8
         Left  => 
           Key => 7 seven; Item => 7 seven
            Left  => null
            Right => null)
         Right => 
           Key => 8; Item => 8
            Left  => null
            Right => 
              Key => 8; Item => 8
               Left  => null
               Right => null)))
      Right => null))
Count  =>  18
Height =>  6
Move completed

Testing Clear/Finalize

Testing Delete
Tree => 
  Key => 7; Item => 7
   Left  => 
     Key => 2; Item => 2
      Left  => 
        Key => 1; Item => 1
         Left  => null
         Right => null)
      Right => 
        Key => 4; Item => 4
         Left  => 
           Key => 3; Item => 3
            Left  => null
            Right => null)
         Right => 
           Key => 5; Item => 5
            Left  => null
            Right => 
              Key => 6; Item => 6
               Left  => null
               Right => null))))
   Right => 
     Key => 9; Item => 9
      Left  => 
        Key => 8; Item => 8
         Left  => null
         Right => 
           Key => 8; Item => 8
            Left  => null
            Right => 
              Key => 8; Item => 8
               Left  => null
               Right => null)))
      Right => null))
Count  =>  11
Height =>  5
delete 6
Tree => 
  Key => 7; Item => 7
   Left  => 
     Key => 2; Item => 2
      Left  => 
        Key => 1; Item => 1
         Left  => null
         Right => null)
      Right => 
        Key => 4; Item => 4
         Left  => 
           Key => 3; Item => 3
            Left  => null
            Right => null)
         Right => 
           Key => 5; Item => 5
            Left  => null
            Right => null)))
   Right => 
     Key => 9; Item => 9
      Left  => 
        Key => 8; Item => 8
         Left  => null
         Right => 
           Key => 8; Item => 8
            Left  => null
            Right => 
              Key => 8; Item => 8
               Left  => null
               Right => null)))
      Right => null))
Count  =>  10
Height =>  5
delete 2
Tree => 
  Key => 7; Item => 7
   Left  => 
     Key => 3; Item => 3
      Left  => 
        Key => 1; Item => 1
         Left  => null
         Right => null)
      Right => 
        Key => 4; Item => 4
         Left  => null
         Right => 
           Key => 5; Item => 5
            Left  => null
            Right => null)))
   Right => 
     Key => 9; Item => 9
      Left  => 
        Key => 8; Item => 8
         Left  => null
         Right => 
           Key => 8; Item => 8
            Left  => null
            Right => 
              Key => 8; Item => 8
               Left  => null
               Right => null)))
      Right => null))
Count  =>  9
Height =>  5
delete 7
Tree => 
  Key => 8; Item => 8
   Left  => 
     Key => 3; Item => 3
      Left  => 
        Key => 1; Item => 1
         Left  => null
         Right => null)
      Right => 
        Key => 4; Item => 4
         Left  => null
         Right => 
           Key => 5; Item => 5
            Left  => null
            Right => null)))
   Right => 
     Key => 9; Item => 9
      Left  => 
        Key => 8; Item => 8
         Left  => null
         Right => 
           Key => 8; Item => 8
            Left  => null
            Right => null))
      Right => null))
Count  =>  8
Height =>  4
delete rest
